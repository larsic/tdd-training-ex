//****************************************************************************
//Exercise 1
@Test(expected = RuntimeException.class)
public final void whenMoreThan2NumbersAreUsedThenExceptionIsThrown() {
    StringCalculator.add("1,2,3");
}
@Test
public final void when2NumbersAreUsedThenNoExceptionIsThrown() {
    StringCalculator.add("1,2");
    Assert.assertTrue(true);
}
@Test(expected = RuntimeException.class)
public final void whenNonNumberIsUsedThenExceptionIsThrown() {
    StringCalculator.add("1,X");
}
//****************************************************************************

//****************************************************************************
//Exercise 2
@Test
public final void whenEmptyStringIsUsedThenReturnValueIs0() {
    Assert.assertEquals(0, StringCalculator.add(""));
}
//****************************************************************************

//****************************************************************************
//Exercise 3
@Test
public final void whenOneNumberIsUsedThenReturnValueIsThatSameNumber() {
    Assert.assertEquals(3, StringCalculator.add("3"));
}

@Test
public final void whenTwoNumbersAreUsedThenReturnValueIsTheirSum() {
    Assert.assertEquals(3+6, StringCalculator.add("3,6"));
}
//****************************************************************************

//****************************************************************************
//Exercise 4
@Test
public final void whenAnyNumberOfNumbersIsUsedThenReturnValuesAreTheirSums() {
    Assert.assertEquals(3+6+15+18+46+33, StringCalculatorSolution.add("3,6,15,18,46,33"));
}
//****************************************************************************

//****************************************************************************
//Exercise 5
@Test
public final void whenDifferentDelimitersOneAtaTime(){
    Assert.assertEquals(3+6+15+18+46+33,StringCalculatorSolution.add(";","3;6;15;18;46;33"));
}
//****************************************************************************

//Exercise 6
//****************************************************************************
@Test
public final void whenNewLine(){
    Assert.assertEquals(3+6+15+18+46+33, StringCalculatorSolution.add(";","3;6n15;18;46n33"));
}
//****************************************************************************

//Excercise 7
//****************************************************************************
@Test
public final void whenNegativeNumbers(){
    RuntimeException exception = null;
    try {
        StringCalculatorSolution.add(",","3,-6,15,-18,46,33");
    } catch (RuntimeException e) {
        exception = e;
    }
    Assert.assertNotNull(exception);
    Assert.assertEquals("Negatives not allowed: [-6, -18]", exception.getMessage());
}
//****************************************************************************

//****************************************************************************
//Exercise 8
@Test
public final void whenNumbersBiggerThan1000(){
    Assert.assertEquals(3+6, StringCalculatorSolution.add(",","3,1000,1001,6,1234"));
}
//****************************************************************************

//****************************************************************************
//Exercise 9
@Test
public final void whenDelimterWithAnyLength(){
    Assert.assertEquals(1+2+3, StringCalculatorSolution.add("--","n1--2--3"));
}
//****************************************************************************

//****************************************************************************
//Exercise 10
@Test
    public final void whenMultipleDelimeters(){
        Assert.assertEquals(1+2+3, StringCalculatorSolution.add("[-][%]","n1-2%3"));
        Assert.assertEquals(1+2+3, StringCalculatorSolution.add("[-][%%]","n1-2%%3"));
    }
//****************************************************************************